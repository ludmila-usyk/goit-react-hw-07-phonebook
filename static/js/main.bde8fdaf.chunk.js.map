{"version":3,"sources":["redux/contacts/contacts-selectors.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/ContactList/ContactListItem.js","components/Container/Container.js","components/Filter/Filter.js","App.js","store/store.js","index.js"],"names":["getFilter","state","contacts","filter","getAllContacts","items","getFilteredContact","createSelector","normalizedFilter","toLowerCase","contact","name","includes","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","number","dispatch","post","then","data","catch","error","id","delete","a","get","createReducer","_","payload","combineReducers","ContactsForm","initialState","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","some","alert","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","Component","PropsType","func","isRequired","connect","contactsSelectors","contactsOperations","ContactsList","children","prototype","PropTypes","node","ContactItem","onDeleteContact","map","onClick","arrayOf","shape","string","Container","target","App","fetchContacts","ContactForm","ContactList","ContactListItem","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devToolss","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bde8fdaf.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilteredContact = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    if (filter) {\r\n      return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    }\r\n    return contacts;\r\n  },\r\n);\r\n\r\n// const getFilteredContact = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   if (filter) {\r\n//     return contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n//   }\r\n//   return contacts;\r\n// };\r\n\r\nexport default { getFilter, getFilteredContact, getAllContacts };","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/filterContact');","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3030';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactError(error)));\r\n// };\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchContactSuccess,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport PropsType from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nclass ContactsForm extends Component {\r\n  initialState = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const hasContacts = contact =>\r\n      contact.name === this.state.name || contact.number === this.state.number;\r\n\r\n    if (this.props.items.some(hasContacts)) {\r\n      alert(`Contact is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit({ ...this.state });\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            id={this.nameInputId}\r\n          />\r\n        </label>\r\n        <label htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            id={this.numberInputId}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactsForm.PropsType = {\r\n  onSubmit: PropsType.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(contactsOperations.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);","import PropTypes from 'prop-types';\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul>{children}</ul>\r\n);\r\n\r\nContactsList.prototype = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst ContactItem = ({ onDeleteContact, contacts }) => (\r\n  <>\r\n    {contacts.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button\r\n            type=\"submit\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactItem.prototype = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\n// const findContact = (allContacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   if (filter) {\r\n//     return allContacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n//   }\r\n//   return allContacts;\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getFilteredContact(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactItem);","\r\nconst Container = ({ children }) => (\r\n  <div>{children}</div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <>\r\n    <h3>Find contacts by name</h3>\r\n    <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\r\n  </>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import { connect } from 'react-redux';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport ContactListItem from './components/ContactList/ContactListItem';\r\nimport Container from './components/Container';\r\nimport Filter from './components/Filter/Filter';\r\nimport contactsOperations from './redux/contacts/contacts-operations';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>PhoneBook</h1>\r\n        <ContactForm />\r\n        <div>\r\n          <h2>Contacts</h2>\r\n          <Filter />\r\n          <ContactList>\r\n            <ContactListItem />\r\n          </ContactList>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","/* eslint-disable import/no-anonymous-default-export */\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport { contactsReducer } from '../redux/contacts';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    //contacts: persistReducer(contactsPersistConfig, contactsReducer ),\r\n  },\r\n  middleware,\r\n  devToolss: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store/store';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);"],"sourceRoot":""}